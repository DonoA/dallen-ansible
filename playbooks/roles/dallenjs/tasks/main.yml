---
# tasks file for dallenjs
- name: Ensure group "{{ service_group }}" exists
  group:
    name: "{{ service_group }}"
    state: present

- name: Add user "{{ service_user }}"  
  user:
    name: "{{ service_user }}"
    groups: "{{ service_group }}"
    shell: /bin/bash
    home: "{{ service_index }}"
    comment: "Service run user"
    state: present
    password: '!'

- name: Ensure nginx is installed
  apt:
    name: nginx
    update_cache: "{{ update_apt_cache }}"
    state: latest

- name: Setup nginx config
  template:
    src: templates/nginx/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'

- name: Install MySQL
  apt: 
    name: 
      - 'python-mysqldb'
      - 'mysql-server'
    update_cache: "{{ update_apt_cache }}"
    cache_valid_time: 3600 
    state: present

- name: Start the MySQL service
  service:
    name: mysql 
    state: started
    enabled: true

- name: update mysql root password for all root accounts
  mysql_user: 
    name: root 
    host: "{{ item }}" 
    password: "{{ mysql_root_password }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    check_implicit_admin: yes
    priv: "*.*:ALL,GRANT"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost

- name: Ensure curl and wget are installed
  apt:
    name: 
      - curl
      - wget
    update_cache: "{{ update_apt_cache }}"
    state: latest

- name: install NVM
  shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | /bin/bash
  args:
    creates: "{{ service_index }}/.nvm/nvm.sh"
  become: yes
  become_user: "{{ service_user }}"

- name: install node "{{ node_version }}" lts
  shell: >
    source {{ service_index }}/.nvm/nvm.sh && nvm install {{ node_version }} && nvm alias default {{ node_version }}
  args:
    executable: /bin/bash
    creates: "{{ service_index }}/.nvm/alias"
  become: yes
  become_user: "{{ service_user }}"

- name: Ensure git is installed
  apt:
    name: git
    update_cache: "{{ update_apt_cache }}"
    state: latest

- name: Try to get current git commit
  shell: >
    git rev-parse --short HEAD
  register: current_commit_hash
  args:
    chdir: "{{ service_index }}/DallenJS"
    executable: /bin/bash
  become: yes
  become_user: "{{ service_user }}"
  ignore_errors: yes

- name: Try to get remote git commit
  shell: >
    git fetch > /dev/null;
    git rev-parse --short origin/master
  register: remote_commit_hash
  args:
    chdir: "{{ service_index }}/DallenJS"
    executable: /bin/bash
  become: yes
  become_user: "{{ service_user }}"
  ignore_errors: yes

- name: download dallen-js repo
  git:
    repo: https://github.com/DonoA/DallenJS.git
    dest: "{{ service_index }}/DallenJS"
    force: yes
  become: yes
  become_user: "{{ service_user }}"
  when: >
    remote_commit_hash.stdout is not defined 
    or current_commit_hash.stdout is not defined 
    or remote_commit_hash.stdout != current_commit_hash.stdout

- name: build server
  shell: >
    source {{ service_index }}/.nvm/nvm.sh && ./build.sh && touch .built
  args:
    chdir: "{{ service_index }}/DallenJS"
    executable: /bin/bash
  become: yes
  become_user: "{{ service_user }}"
  when: >
    remote_commit_hash.stdout is not defined 
    or current_commit_hash.stdout is not defined 
    or remote_commit_hash.stdout != current_commit_hash.stdout


- name: create nginx config
  template:
    src: templates/nginx/dallenjs.conf.j2
    dest: /etc/nginx/sites-available/dallenjs.conf
    owner: root
    group: root
    mode: '0644'

- name: link nginx config
  file:
    src: /etc/nginx/sites-available/dallenjs.conf
    dest: /etc/nginx/sites-enabled/dallenjs.conf
    owner: root
    group: root
    state: link

- name: create server config
  template:
    src: templates/config.json.j2
    dest: "{{ service_index }}/DallenJS/server/config.json"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0644'

- name: create db setup script
  template:
    src: templates/setup_db.sql.j2
    dest: "{{ service_index }}/DallenJS/server/setup_db.sql"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0644'

- name: Run mysql setup file
  mysql_db:
    state: import
    name: all
    login_user: root
    login_password: "{{ mysql_root_password }}"
    target: "{{ service_index }}/DallenJS/server/setup_db.sql"

- name: create database.json file
  template:
    src: templates/database.json.j2
    dest: "{{ service_index }}/DallenJS/server/database.json"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0644'

- name: run database migrations
  shell: >
    source {{ service_index }}/.nvm/nvm.sh && npm run migrate up
  args:
    chdir: "{{ service_index }}/DallenJS/server"
    executable: /bin/bash
  become: yes
  become_user: "{{ service_user }}"

- name: Copy in stats files
  copy:
    src: templates/stats/
    dest: "{{ service_index }}/DallenJS/server/stats"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0644'

- name: create dallenjs service
  template:
    src: templates/dallenjs.service.j2
    dest: /lib/systemd/system/dallenjs.service
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0644'

- name: restart dallenjs
  systemd:
    state: restarted
    name: dallenjs